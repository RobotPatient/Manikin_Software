@startuml ClassDesign

set separator ::

package Manikin_Software <<frame>> {
    class BreathingControl {
        Description:
        This class takes the incoming datapoints and
        sends them to the Compression and Breathing class.
        It also makes sure the 2 keep in sync
    }

    class Compression {
        Description:
        This class converst the incoming datapoints
        to usable values for to actuate the motor
    }

    class Breathing {
        Description:
        This class converst the incoming datapoints
        to usable values for to actuate the pump
    }
}

package Manikin_Software_Libraries <<frame>> {
    namespace hal::ringbuf {
        class ringbuf {

        }
    }
    namespace Actuators {
        class Motor {
            Description:
            This class controls a single motor.
            This motor moves the chest up and down
        }

        class Pump {
            Description:
            This class controls a single air pump.
            For the purpose of breating
        }
    }
    namespace hal::i2c {
        class i2c_breathingmod {
            Description:
            Class used for in the BreathingModule for communication to the main board,
            This data includes:
            See Manikin_Software_Libraries/modules/hal_i2c/docs/ClassDiagram.puml
            for the full implementation of the I2C library
            "- A start signal"
            "- A stop signal"
            "- (optional) A datastream for different breathing patterns"
        }
    }
}

hal::i2c::i2c_breathingmod --* BreathingControl 
BreathingControl *-- Compression : Pattern of Compressionmovements
BreathingControl *-- Breathing : Pattern of AirPumping
Compression   *-- Actuators::Motor : BreathingControl MotorCompression according to received pattern
Breathing *-- Actuators::Pump : BreathingControl Pump according to received pattern

@enduml